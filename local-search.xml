<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>zsh中的alias</title>
    <link href="/462e21b464ab/"/>
    <url>/462e21b464ab/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs bash">g=git<br>ga=<span class="hljs-string">&#x27;git add&#x27;</span><br>gaa=<span class="hljs-string">&#x27;git add --all&#x27;</span><br>gapa=<span class="hljs-string">&#x27;git add --patch&#x27;</span><br>gb=<span class="hljs-string">&#x27;git branch&#x27;</span><br>gba=<span class="hljs-string">&#x27;git branch -a&#x27;</span><br>gbd=<span class="hljs-string">&#x27;git branch -d&#x27;</span><br>gbda=<span class="hljs-string">&#x27;git branch --no-color --merged | command grep -vE &quot;^(\*|\s*(master|develop|dev)\s*$)&quot; | command xargs -n 1 git branch -d&#x27;</span><br>gbl=<span class="hljs-string">&#x27;git blame -b -w&#x27;</span><br>gbnm=<span class="hljs-string">&#x27;git branch --no-merged&#x27;</span><br>gbr=<span class="hljs-string">&#x27;git branch --remote&#x27;</span><br>gbs=<span class="hljs-string">&#x27;git bisect&#x27;</span><br>gbsb=<span class="hljs-string">&#x27;git bisect bad&#x27;</span><br>gbsg=<span class="hljs-string">&#x27;git bisect good&#x27;</span><br>gbsr=<span class="hljs-string">&#x27;git bisect reset&#x27;</span><br>gbss=<span class="hljs-string">&#x27;git bisect start&#x27;</span><br>gc=<span class="hljs-string">&#x27;git commit -v&#x27;</span><br><span class="hljs-string">&#x27;gc!&#x27;</span>=<span class="hljs-string">&#x27;git commit -v --amend&#x27;</span><br>gca=<span class="hljs-string">&#x27;git commit -v -a&#x27;</span><br><span class="hljs-string">&#x27;gca!&#x27;</span>=<span class="hljs-string">&#x27;git commit -v -a --amend&#x27;</span><br>gcam=<span class="hljs-string">&#x27;git commit -a -m&#x27;</span><br><span class="hljs-string">&#x27;gcan!&#x27;</span>=<span class="hljs-string">&#x27;git commit -v -a --no-edit --amend&#x27;</span><br><span class="hljs-string">&#x27;gcans!&#x27;</span>=<span class="hljs-string">&#x27;git commit -v -a -s --no-edit --amend&#x27;</span><br>gcb=<span class="hljs-string">&#x27;git checkout -b&#x27;</span><br>gcd=<span class="hljs-string">&#x27;git checkout develop&#x27;</span><br>gcf=<span class="hljs-string">&#x27;git config --list&#x27;</span><br>gcl=<span class="hljs-string">&#x27;git clone --recursive&#x27;</span><br>gclean=<span class="hljs-string">&#x27;git clean -fd&#x27;</span><br>gcm=<span class="hljs-string">&#x27;git checkout master&#x27;</span><br>gcmsg=<span class="hljs-string">&#x27;git commit -m&#x27;</span><br><span class="hljs-string">&#x27;gcn!&#x27;</span>=<span class="hljs-string">&#x27;git commit -v --no-edit --amend&#x27;</span><br>gco=<span class="hljs-string">&#x27;git checkout&#x27;</span><br>gcount=<span class="hljs-string">&#x27;git shortlog -sn&#x27;</span><br>gcp=<span class="hljs-string">&#x27;git cherry-pick&#x27;</span><br>gcpa=<span class="hljs-string">&#x27;git cherry-pick --abort&#x27;</span><br>gcpc=<span class="hljs-string">&#x27;git cherry-pick --continue&#x27;</span><br>gcs=<span class="hljs-string">&#x27;git commit -S&#x27;</span><br>gd=<span class="hljs-string">&#x27;git diff&#x27;</span><br>gdca=<span class="hljs-string">&#x27;git diff --cached&#x27;</span><br>gdct=<span class="hljs-string">&#x27;git describe --tags `git rev-list --tags --max-count=1`&#x27;</span><br>gdt=<span class="hljs-string">&#x27;git diff-tree --no-commit-id --name-only -r&#x27;</span><br>gdw=<span class="hljs-string">&#x27;git diff --word-diff&#x27;</span><br>gf=<span class="hljs-string">&#x27;git fetch&#x27;</span><br>gfa=<span class="hljs-string">&#x27;git fetch --all --prune&#x27;</span><br>gfo=<span class="hljs-string">&#x27;git fetch origin&#x27;</span><br>gg=<span class="hljs-string">&#x27;git gui citool&#x27;</span><br>gga=<span class="hljs-string">&#x27;git gui citool --amend&#x27;</span><br>ggpull=<span class="hljs-string">&#x27;git pull origin $(git_current_branch)&#x27;</span><br>ggpur=ggu<br>ggpush=<span class="hljs-string">&#x27;git push origin $(git_current_branch)&#x27;</span><br>ggsup=<span class="hljs-string">&#x27;git branch --set-upstream-to=origin/$(git_current_branch)&#x27;</span><br>ghh=<span class="hljs-string">&#x27;git help&#x27;</span><br>gignore=<span class="hljs-string">&#x27;git update-index --assume-unchanged&#x27;</span><br>gignored=<span class="hljs-string">&#x27;git ls-files -v | grep &quot;^[[:lower:]]&quot;&#x27;</span><br>git-svn-dcommit-push=<span class="hljs-string">&#x27;git svn dcommit &amp;&amp; git push github master:svntrunk&#x27;</span><br>gk=<span class="hljs-string">&#x27;gitk --all --branches&#x27;</span><br>gke=<span class="hljs-string">&#x27;gitk --all $(git log -g --pretty=%h)&#x27;</span><br>gl=<span class="hljs-string">&#x27;git pull&#x27;</span><br>glg=<span class="hljs-string">&#x27;git log --stat&#x27;</span><br>glgg=<span class="hljs-string">&#x27;git log --graph&#x27;</span><br>glgga=<span class="hljs-string">&#x27;git log --graph --decorate --all&#x27;</span><br>glgm=<span class="hljs-string">&#x27;git log --graph --max-count=10&#x27;</span><br>glgp=<span class="hljs-string">&#x27;git log --stat -p&#x27;</span><br>glo=<span class="hljs-string">&#x27;git log --oneline --decorate&#x27;</span><br>globurl=<span class="hljs-string">&#x27;noglob urlglobber &#x27;</span><br>glog=<span class="hljs-string">&#x27;git log --oneline --decorate --graph&#x27;</span><br>gloga=<span class="hljs-string">&#x27;git log --oneline --decorate --graph --all&#x27;</span><br>glol=<span class="hljs-string">&#x27;git log --graph --pretty=&#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; --abbrev-commit&#x27;</span><br>glola=<span class="hljs-string">&#x27;git log --graph --pretty=&#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span>%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; --abbrev-commit --all&#x27;</span><br>glp=_git_log_prettily<br>glum=<span class="hljs-string">&#x27;git pull upstream master&#x27;</span><br>gm=<span class="hljs-string">&#x27;git merge&#x27;</span><br>gmom=<span class="hljs-string">&#x27;git merge origin/master&#x27;</span><br>gmt=<span class="hljs-string">&#x27;git mergetool --no-prompt&#x27;</span><br>gmtvim=<span class="hljs-string">&#x27;git mergetool --no-prompt --tool=vimdiff&#x27;</span><br>gmum=<span class="hljs-string">&#x27;git merge upstream/master&#x27;</span><br>gp=<span class="hljs-string">&#x27;git push&#x27;</span><br>gpd=<span class="hljs-string">&#x27;git push --dry-run&#x27;</span><br>gpoat=<span class="hljs-string">&#x27;git push origin --all &amp;&amp; git push origin --tags&#x27;</span><br>gpristine=<span class="hljs-string">&#x27;git reset --hard &amp;&amp; git clean -dfx&#x27;</span><br>gpsup=<span class="hljs-string">&#x27;git push --set-upstream origin $(git_current_branch)&#x27;</span><br>gpu=<span class="hljs-string">&#x27;git push upstream&#x27;</span><br>gpv=<span class="hljs-string">&#x27;git push -v&#x27;</span><br>gr=<span class="hljs-string">&#x27;git remote&#x27;</span><br>gra=<span class="hljs-string">&#x27;git remote add&#x27;</span><br>grb=<span class="hljs-string">&#x27;git rebase&#x27;</span><br>grba=<span class="hljs-string">&#x27;git rebase --abort&#x27;</span><br>grbc=<span class="hljs-string">&#x27;git rebase --continue&#x27;</span><br>grbi=<span class="hljs-string">&#x27;git rebase -i&#x27;</span><br>grbm=<span class="hljs-string">&#x27;git rebase master&#x27;</span><br>grbs=<span class="hljs-string">&#x27;git rebase --skip&#x27;</span><br>grep=<span class="hljs-string">&#x27;grep  --color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn&#125;&#x27;</span><br>grh=<span class="hljs-string">&#x27;git reset HEAD&#x27;</span><br>grhh=<span class="hljs-string">&#x27;git reset HEAD --hard&#x27;</span><br>grmv=<span class="hljs-string">&#x27;git remote rename&#x27;</span><br>grrm=<span class="hljs-string">&#x27;git remote remove&#x27;</span><br>grset=<span class="hljs-string">&#x27;git remote set-url&#x27;</span><br>grt=<span class="hljs-string">&#x27;cd $(git rev-parse --show-toplevel || echo &quot;.&quot;)&#x27;</span><br>gru=<span class="hljs-string">&#x27;git reset --&#x27;</span><br>grup=<span class="hljs-string">&#x27;git remote update&#x27;</span><br>grv=<span class="hljs-string">&#x27;git remote -v&#x27;</span><br>gsb=<span class="hljs-string">&#x27;git status -sb&#x27;</span><br>gsd=<span class="hljs-string">&#x27;git svn dcommit&#x27;</span><br>gsi=<span class="hljs-string">&#x27;git submodule init&#x27;</span><br>gsps=<span class="hljs-string">&#x27;git show --pretty=short --show-signature&#x27;</span><br>gsr=<span class="hljs-string">&#x27;git svn rebase&#x27;</span><br>gss=<span class="hljs-string">&#x27;git status -s&#x27;</span><br>gst=<span class="hljs-string">&#x27;git status&#x27;</span><br>gsta=<span class="hljs-string">&#x27;git stash save&#x27;</span><br>gstaa=<span class="hljs-string">&#x27;git stash apply&#x27;</span><br>gstc=<span class="hljs-string">&#x27;git stash clear&#x27;</span><br>gstd=<span class="hljs-string">&#x27;git stash drop&#x27;</span><br>gstl=<span class="hljs-string">&#x27;git stash list&#x27;</span><br>gstp=<span class="hljs-string">&#x27;git stash pop&#x27;</span><br>gsts=<span class="hljs-string">&#x27;git stash show --text&#x27;</span><br>gsu=<span class="hljs-string">&#x27;git submodule update&#x27;</span><br>gts=<span class="hljs-string">&#x27;git tag -s&#x27;</span><br>gtv=<span class="hljs-string">&#x27;git tag | sort -V&#x27;</span><br>gunignore=<span class="hljs-string">&#x27;git update-index --no-assume-unchanged&#x27;</span><br>gunwip=<span class="hljs-string">&#x27;git log -n 1 | grep -q -c &quot;\-\-wip\-\-&quot; &amp;&amp; git reset HEAD~1&#x27;</span><br>gup=<span class="hljs-string">&#x27;git pull --rebase&#x27;</span><br>gupv=<span class="hljs-string">&#x27;git pull --rebase -v&#x27;</span><br>gwch=<span class="hljs-string">&#x27;git whatchanged -p --abbrev-commit --pretty=medium&#x27;</span><br>gwip=<span class="hljs-string">&#x27;git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify -m &quot;--wip--&quot;&#x27;</span><br><span class="hljs-built_in">history</span>=<span class="hljs-string">&#x27;fc -l 1&#x27;</span><br>l=<span class="hljs-string">&#x27;ls -lah&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zsh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dispatchEvent派发自定义事件</title>
    <link href="/107bc9fdddde/"/>
    <url>/107bc9fdddde/</url>
    
    <content type="html"><![CDATA[<h1 id="dispatchEvent派发自定义事件"><a href="#dispatchEvent派发自定义事件" class="headerlink" title="dispatchEvent派发自定义事件"></a>dispatchEvent派发自定义事件</h1><p>暂不介绍对低版本IE的兼容。</p><p>标准浏览器中使用dispatchEvent派发自定义事件：<code>element.dispatchEvent()</code>，除此之外，还有创建和初始化事件：</p><p>一般的流程是：创建 &gt;&gt; 初始化 &gt;&gt; 派发。</p><p>对应的事件流程：<code>document.createEvent() &gt;&gt; event.initEvent() &gt;&gt; element.dispatchEvent()</code></p><p>先来个实例**<code>demo1</code>**，控制台输出了一个Event对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">   <span class="hljs-keyword">var</span> elem = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#div&#x27;</span>);</span><br><span class="javascript">   <span class="hljs-keyword">var</span> event = <span class="hljs-built_in">document</span>.createEvent(<span class="hljs-string">&#x27;Event&#x27;</span>);</span><br><span class="javascript">   <span class="hljs-comment">// 定义事件名称myEvent</span></span><br><span class="javascript">   event.initEvent(<span class="hljs-string">&#x27;myEvent&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);</span><br><span class="javascript">   <span class="hljs-comment">// 监听myEvent</span></span><br><span class="javascript">   elem.addEventListener(<span class="hljs-string">&#x27;myEvent&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(e);</span><br><span class="javascript">   &#125;, <span class="hljs-literal">false</span>);</span><br><span class="javascript">   <span class="hljs-comment">// 使用目标对象去派发事件，可以是元素节点/事件对象</span></span><br>   elem.dispatchEvent(event);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，</p><p>1.<code>createEvent()</code>方法返回新创建的Event对象，支持一个参数，表示事件类型</p><table><thead><tr><th>参数</th><th>事件接口</th><th>初始化方法</th></tr></thead><tbody><tr><td>HTMLEvents</td><td>HTMLEvent</td><td>initEvent()</td></tr><tr><td>MouseEvents</td><td>MouseEvent</td><td>initMouseEvent()</td></tr><tr><td>UIEvents</td><td>UIEvent</td><td>initUIEvent()</td></tr><tr><td>MutationEvents</td><td>MutationEvent</td><td>initMutationEvent()</td></tr></tbody></table><p>2.<code>initEvent()</code>方法用于初始化通过DocumentEvent接口创建的Event的值。 支持三个参数：<code>initEvent(eventName, canBubble, preventDefault)</code>. 分别表示： 事件名称，是否可以冒泡，是否阻止事件的默认操作</p><p>3.<code>dispatchEvent()</code>就是触发执行了，<code>element.dispatchEvent(eventObject)</code>, 参数<code>eventObject</code>表示事件对象，是<code>createEvent()</code>方法返回的创建的Event对象。</p><p>比较常用的，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//向window派发resize事件</span><br><span class="hljs-built_in">window</span>.dispatchEvent(<span class="hljs-keyword">new</span> Event(<span class="hljs-string">&#x27;resize&#x27;</span>))<br></code></pre></td></tr></table></figure><p>还可以用Event、CustomEvent去定义自定义事件的函数，所以上面<code>demo1</code>也可以这么改写为<code>demo2</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> elem = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#div&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> event = <span class="hljs-keyword">new</span> Event(<span class="hljs-string">&#x27;myEvent&#x27;</span>);</span><br><span class="javascript">    elem.addEventListener(<span class="hljs-string">&#x27;myEvent&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(e)</span><br><span class="javascript">  &#125;, <span class="hljs-literal">false</span>);</span><br>    elem.dispatchEvent(event);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>CustomEvent</code> 可以创建一个更具体的自定义事件，并且可以携带额外的参数：<code>new CustomEvent(eventname, options)</code>:</p><p>其中options可以是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  detail: &#123;<br>    ...<br>  &#125;,<span class="hljs-comment">//键名必须是detail</span><br>  bubbles: <span class="hljs-literal">true</span>,    <span class="hljs-comment">//是否冒泡</span><br>  cancelable: <span class="hljs-literal">false</span> <span class="hljs-comment">//是否取消默认事件</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">   <span class="hljs-keyword">var</span> elem = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#div&#x27;</span>);</span><br><span class="javascript">   elem.addEventListener(<span class="hljs-string">&quot;myEvent&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123; <span class="hljs-built_in">console</span>.log(e.detail) &#125;);</span><br><span class="javascript">   <span class="hljs-keyword">var</span> event = <span class="hljs-keyword">new</span> CustomEvent(<span class="hljs-string">&quot;myEvent&quot;</span>, &#123;<span class="hljs-string">&quot;detail&quot;</span>:&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-number">123</span>&#125;&#125;);</span><br>   elem.dispatchEvent(event);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 结果输出：&#123;username: 123&#125;</span><br></code></pre></td></tr></table></figure><p>与此类似的有Jquery里面的trigger事件：</p><p>之前有一篇文章专门介绍的<a href="https://blog.csdn.net/qq_35087256/article/details/79552624">trigger的用法总结</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$( <span class="hljs-string">&quot;p&quot;</span> ).on( <span class="hljs-string">&quot;myEvent&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> event, param </span>) </span>&#123;<br> alert(param);<br>&#125;);<br>$( <span class="hljs-string">&quot;p&quot;</span> ).trigger( <span class="hljs-string">&quot;myEvent&quot;</span>, [ <span class="hljs-string">&quot;123&quot;</span> ] );<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手写EventBus</title>
    <link href="/eecdc8c952a1/"/>
    <url>/eecdc8c952a1/</url>
    
    <content type="html"><![CDATA[<h1 id="手写EventBus"><a href="#手写EventBus" class="headerlink" title="手写EventBus"></a>手写EventBus</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 发布订阅模式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventEmitter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">// 事件对象，存放订阅的名字和事件  如:  &#123; click: [ handle1, handle2 ]  &#125;</span><br>      <span class="hljs-built_in">this</span>.events = &#123;&#125;<br>    &#125;<br>    <span class="hljs-comment">// 订阅事件的方法</span><br>    <span class="hljs-function"><span class="hljs-title">on</span>(<span class="hljs-params">eventName, callback</span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.events[eventName]) &#123;<br>        <span class="hljs-comment">// 一个名字可以订阅多个事件函数</span><br>        <span class="hljs-built_in">this</span>.events[eventName] = [callback]<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 存在则push到指定数组的尾部保存</span><br>        <span class="hljs-built_in">this</span>.events[eventName].push(callback)<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 触发事件的方法</span><br>    <span class="hljs-function"><span class="hljs-title">emit</span>(<span class="hljs-params">eventName, ...rest</span>)</span> &#123;<br>      <span class="hljs-comment">// 遍历执行所有订阅的事件</span><br>      <span class="hljs-built_in">this</span>.events[eventName] &amp;&amp;<br>        <span class="hljs-built_in">this</span>.events[eventName].forEach(<span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> f.apply(<span class="hljs-built_in">this</span>, rest))<br>    &#125;<br>    <span class="hljs-comment">// 移除订阅事件</span><br>    <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">eventName, callback</span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.events[eventName]) &#123;<br>        <span class="hljs-built_in">this</span>.events[eventName] = <span class="hljs-built_in">this</span>.events[eventName].filter(<span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> f != callback)<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 只执行一次订阅的事件，然后移除</span><br>    <span class="hljs-function"><span class="hljs-title">once</span>(<span class="hljs-params">eventName, callback</span>)</span> &#123;<br>      <span class="hljs-comment">// 绑定的时fn, 执行的时候会触发fn函数</span><br>      <span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;<br>        callback() <span class="hljs-comment">// fn函数中调用原有的callback</span><br>        <span class="hljs-built_in">this</span>.remove(eventName, fn) <span class="hljs-comment">// 删除fn, 再次执行的时候之后执行一次</span><br>      &#125;<br>      <span class="hljs-built_in">this</span>.on(eventName, fn)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AOP面向切面编程</title>
    <link href="/cd7d11405554/"/>
    <url>/cd7d11405554/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-的面向切面编程"><a href="#JavaScript-的面向切面编程" class="headerlink" title="JavaScript 的面向切面编程"></a>JavaScript 的面向切面编程</h1><blockquote><ul><li>  原文地址：<a href="https://blog.bitsrc.io/aspect-oriented-programming-in-javascript-c4cb43f6bfcc">Aspect-Oriented Programming in JavaScript</a></li><li>  原文作者：<a href="https://medium.com/@deleteman123">Fernando Doglio</a></li></ul></blockquote><p>我们都知道面向对象编程，或者至少听说过 JavaScript 领域的函数式编程，但是，你听说过面向切面编程吗？</p><p>我知道，它听起来像是《魔法战队》中某一集出现的东西。然而，AOP 是实际存在的。此外，虽然我们现在没有使用它，但它却可以被应用于我们日常会见到的一些用例中。</p><p>它最大的优势在于，你可以毫不费力的将 AOP 与 FP 或 OOP 结合使用，就像 JavaScript 中的 OOP 和 FP 一样。 因此，首先让我们了解这个切面的作用，以及它对 JavaScript 开发人员的实际用途。</p><h2 id="AOP-简介"><a href="#AOP-简介" class="headerlink" title="AOP 简介"></a>AOP 简介</h2><p>面向切面编程给我们提供了一个方法，让我们可以在不修改目标逻辑的情况下，将代码注入到现有的函数或对象中。</p><p>虽然不是必须的，但注入的代码意味着具有横切关注点，比如添加日志功能、调试元数据或其它不太通用的但可以注入额外的行为，而不影响原始代码的内容。</p><p>给你举一个合适的例子，假设你已经写好了业务逻辑，但是现在你意识到没有添加日志代码。通常的方法是将日志逻辑集中到一个新的模块中，然后逐个函数添加日志信息。</p><p>然而，如果你可以获取同一个日志程序，在你想要记录的每个方法执行过程中的特定节点，只需一行代码就可将程序注入，那么这肯定会给你带来很多便利。难道不是吗？</p><h4 id="切面、通知和切点（是什么、在何时、在何地）"><a href="#切面、通知和切点（是什么、在何时、在何地）" class="headerlink" title="切面、通知和切点（是什么、在何时、在何地）"></a>切面、通知和切点（是什么、在何时、在何地）</h4><p>为了使上面的定义更形式化一点，让我们以日志程序为例，介绍有关 AOP 的三个概念。如果你决定进一步研究这个范式，这些将对你有所帮助：</p><ul><li>  <strong>切面 (**是什么</strong>)：** 这是你想要注入到你的目标代码的 “切面” 或者行为。在我们的上下文环境（JavaScript）中，这指的是封装了你想要添加的行为的函数。</li><li>  <strong>通知 (**在何时</strong>)：** 你希望这个切面什么时候执行？“通知” 指定了你想要执行切面代码的一些常见的时刻，比如 “before”、“after”、“around”、“whenThrowing” 等等。反过来，它们指的是与代码执行相关的时间点。对于在代码执行后引用的部分，这个切面将拦截返回值，并可能在需要时覆盖它。</li><li>  <strong>切点 (**在何地</strong>)：** 他们引用了你想要注入的切面在你的目标代码中的位置。理论上，你可以明确指定在目标代码中的任何位置去执行切面代码。实际上这并不现实，但你可以潜在地指定，比如：“我的对象中的所有方法”，或者“仅仅是这一个特定方法”，或者我们甚至可以使用“所有以 <code>get_</code> 开头的方法”之类的内容。</li></ul><p>有了这些解释，你会发现创建一个基于 AOP 的库来向现有的基于 OOP 的业务逻辑（举个例子）添加日志逻辑是相对容易的。你所要做的就是用一个自定义函数替换目标对象现有的匹配方法，该自定义函数会在适当的时间点添加切面逻辑，然后再调用原有的方法。</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><p>因为我是一个视觉学习者，所以我认为，展示一个基本的例子说明如何实现一种 <code>切面</code> 方法来添加基于 AOP 的行为将是个漫长的过程。</p><p>下面的示例将阐明实现它有多容易以及它给你的代码带来的好处。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** 用于获取一个对象中所有方法的帮助函数 */</span><br><span class="hljs-keyword">const</span> getMethods = <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> <span class="hljs-built_in">Object</span>.getOwnPropertyNames(<span class="hljs-built_in">Object</span>.getPrototypeOf(obj)).filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-keyword">typeof</span> obj[item] === <span class="hljs-string">&#x27;function&#x27;</span>)<br><br><span class="hljs-comment">/** 将原始方法替换为自定义函数，该函数将在通知指示时调用我们的切面 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceMethod</span>(<span class="hljs-params">target, methodName, aspect, advice</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> originalCode = target[methodName]<br>    target[methodName] = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>([<span class="hljs-string">&quot;before&quot;</span>, <span class="hljs-string">&quot;around&quot;</span>].includes(advice)) &#123;<br>            aspect.apply(target, args)<br>        &#125;<br>        <span class="hljs-keyword">const</span> returnedValue = originalCode.apply(target, args)<br>        <span class="hljs-keyword">if</span>([<span class="hljs-string">&quot;after&quot;</span>, <span class="hljs-string">&quot;around&quot;</span>].includes(advice)) &#123;<br>            aspect.apply(target, args)<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;afterReturning&quot;</span> == advice) &#123;<br>            <span class="hljs-keyword">return</span> aspect.apply(target, [returnedValue])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> returnedValue<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-comment">// 导出的主要方法：在需要的时间和位置将切面注入目标</span><br>    inject: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, aspect, advice, pointcut, method = <span class="hljs-literal">null</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(pointcut == <span class="hljs-string">&quot;method&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span>(method != <span class="hljs-literal">null</span>) &#123;<br>                replaceMethod(target, method, aspect, advice)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Tryin to add an aspect to a method, but no method specified&quot;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pointcut == <span class="hljs-string">&quot;methods&quot;</span>) &#123;<br>            <span class="hljs-keyword">const</span> methods = getMethods(target)<br>            methods.forEach( <span class="hljs-function"><span class="hljs-params">m</span> =&gt;</span> &#123;<br>                replaceMethod(target, m, aspect, advice)<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非常简单，正如我提到的，上面的代码并没有涵盖所有的用例，但是它应该足以涵盖下一个示例。</p><p>但是在我们往下看之前，注意一下这个 <code>replaceMethod</code> 函数，这就是“魔法”生效的地方。它能够创建新函数，也可以决定我们何时调用我们的切面以及如何处理它的返回值。</p><p>接下来说明这个库的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> AOP = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./aop.js&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBussinessLogic</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Calling add&quot;</span>)<br>        <span class="hljs-keyword">return</span> a + b<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">concat</span>(<span class="hljs-params">a, b</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Calling concat&quot;</span>)<br>        <span class="hljs-keyword">return</span> a + b<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">power</span>(<span class="hljs-params">a, b</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Calling power&quot;</span>)<br>        <span class="hljs-keyword">return</span> a ** b<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> o = <span class="hljs-keyword">new</span> MyBussinessLogic()<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loggingAspect</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;== Calling the logger function ==&quot;</span>)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Arguments received: &quot;</span> + args)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printTypeOfReturnedValueAspect</span>(<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Returned type: &quot;</span> + <span class="hljs-keyword">typeof</span> value)<br>&#125;<br><br>AOP.inject(o, loggingAspect, <span class="hljs-string">&quot;before&quot;</span>, <span class="hljs-string">&quot;methods&quot;</span>)<br>AOP.inject(o, printTypeOfReturnedValueAspect, <span class="hljs-string">&quot;afterReturning&quot;</span>, <span class="hljs-string">&quot;methods&quot;</span>)<br><br>o.add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>o.concat(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;goodbye&quot;</span>)<br>o.power(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>这只是一个包含三个方法的基本对象，没什么特别的。我们想要去注入两个通用的切面，一个用于记录接收到的属性，另一个用于分析他们的返回值并记录他们的类型。两个切面，两行代码（并不需要六行代码）。</p><p>这个示例到这里就结束了，这里是你将得到的输出：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f8e7bc961604b75ae29829a866cb826~tplv-k3u1fbpfcp-watermark.image"></p><h2 id="AOP-的优点"><a href="#AOP-的优点" class="headerlink" title="AOP 的优点"></a>AOP 的优点</h2><p>在知道了 AOP 的概念及用途后，也行你已经猜到了为什么人们会想要使用面向切面编程，不过还是让我们做一个快速汇总吧：</p><ul><li>  <strong>封装横切关注点的好方法</strong>。我非常喜欢封装，因为它意味着更容易阅读和维护可以在整个项目中重复使用的代码。</li><li>  <strong>灵活的逻辑</strong>。在注入切面时，围绕通知和切入点实现的逻辑可以为你提供很大的灵活性。反之这又有助于你动态地打开和关闭代码逻辑的不同切面（有意的双关）。</li><li>  <strong>跨项目重复使用切面</strong>。你可以将切面视为组件，即可以在任何地方运行的小的、解耦的代码片段。如果你正确地编写了切面代码，就可以轻松地在不同的项目中共享它们。</li></ul><h2 id="AOP-的主要问题"><a href="#AOP-的主要问题" class="headerlink" title="AOP 的主要问题"></a>AOP 的主要问题</h2><p>因为并非每件事都是完美的，这种范式遭到了一些批评者的反对。</p><p>他们提出的主要问题是，它的主要的优势实际上隐藏了代码逻辑和复杂性，在不太清楚的情况下可能会产生副作用。</p><p>如果你仔细想想，他们说的有一定道理，AOP 给了你很多能力，可以将无关的行为添加到现有的方法中，甚至可以替换它们的整个逻辑。当然，这可能不是引入此范式的确切原因，而且它肯定不是我上面提供的示例的意图。</p><p>然而，它确实可以让你去做任何你想做的事情，再加上缺乏对良好编程实践的理解，可能会导致非常大的混乱。</p><p>为了不让自己听起来太老套，我转述一下 Uncle Ben 的话:</p><blockquote><p>能力越大，责任越大</p></blockquote><p>如果你想正确地使用 AOP ，那么就必须理解软件开发的最佳实践。</p><p>在我看来，仅仅因为你使用这个工具之后可能会带来很大的损害，并不足以说明这个工具就是不好的，因为它也会带来很多的好处（即你可以将很多常见的逻辑提取到一个集中的位置，并可以在你需要的任何地方用一行代码注入它）。对我来说，这是一个强大的工具，值得学习，也绝对值得使用。</p><hr><p>面向切面编程是 OOP 的完美补充，特别是得益于 JavaScript 的动态特性，我们可以非常容易地实现它（如这里的代码演示）。它提供了强大的功能，能够对大量逻辑进行模块化和解耦，以后甚至可以与其他项目共享这些逻辑。</p><p>当然，如果你不正确地使用它，你会把事情搞得一团糟。但是你绝对可以利用它来简化和清理大量的代码。这就是我对 AOP 的看法，你呢？你曾经听说过 AOP 吗？你以前使用过它吗？请在下面留言并分享你的想法！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>订阅发布模式和观察者模式的区别</title>
    <link href="/9d0eee40d124/"/>
    <url>/9d0eee40d124/</url>
    
    <content type="html"><![CDATA[<h1 id="订阅发布模式和观察者模式的区别"><a href="#订阅发布模式和观察者模式的区别" class="headerlink" title="订阅发布模式和观察者模式的区别"></a>订阅发布模式和观察者模式的区别</h1><p>首先我们需要了解两者的定义和实现的方式，才能更好的区分两者的不同点。</p><h2 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h2><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构</a>中，<strong>发布-订阅</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF">消息</a><a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F">范式</a>，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</p></blockquote><p>或许你用过 <code>eventemitter</code>、node 的 <code>events</code>、Backbone 的 <code>events</code> 等等，这些都是前端早期，比较流行的数据流通信方式，即<strong>订阅发布模式</strong>。</p><p>从字面意思来看，我们需要首先订阅，发布者发布消息后才会收到发布的消息。不过我们还需要一个中间者来协调，从事件角度来说，这个中间者就是事件中心，协调发布者和订阅者直接的消息通信。</p><p>完成订阅发布整个流程需要三个角色：</p><ul><li>  <strong>发布者</strong></li><li>  <strong>事件中心</strong></li><li>  <strong>订阅者</strong></li></ul><p>以事件为例，简单流程如下：</p><p><strong>发布者-&gt;事件中心&lt;=&gt;订阅者</strong>，订阅者需要向事件中心订阅指定的事件 -&gt; 发布者向事件中心发布指定事件内容 -&gt; 事件中心通知订阅者 -&gt; 订阅者收到消息（可能是多个订阅者），到此完成了一次订阅发布的流程。</p><p>简单的代码实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 所有 eventType 监听器回调函数（数组）</span><br>    <span class="hljs-built_in">this</span>.listeners = &#123;&#125;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 订阅事件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>eventType 事件类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> </span>listener 订阅后发布动作触发的回调函数，参数为发布的数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">on</span>(<span class="hljs-params">eventType, listener</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.listeners[eventType]) &#123;<br>      <span class="hljs-built_in">this</span>.listeners[eventType] = []<br>    &#125;<br>    <span class="hljs-built_in">this</span>.listeners[eventType].push(listener)<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 发布事件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>eventType 事件类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Any&#125;</span> </span>data 发布的内容</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">emit</span>(<span class="hljs-params">eventType, data</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> callbacks = <span class="hljs-built_in">this</span>.listeners[eventType]<br>    <span class="hljs-keyword">if</span> (callbacks) &#123;<br>      callbacks.forEach(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;<br>        c(data)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> event = <span class="hljs-keyword">new</span> Event()<br>event.on(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(data)<br>&#125;)<br>event.emit(<span class="hljs-string">&#x27;open&#x27;</span>, &#123; <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure><p>Event 可以理解为事件中心，提供了订阅和发布功能。</p><p><strong>订阅者在订阅事件的时候，只关注事件本身，而不关心谁会发布这个事件；发布者在发布事件的时候，只关注事件本身，而不关心谁订阅了这个事件。</strong></p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p><strong>观察者模式</strong>定义了一种一对多的依赖关系，让多个<strong>观察者</strong>对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有<strong>观察者</strong>对象，使它们能够自动更新。</p></blockquote><p>观察者模式我们可能比较熟悉的场景就是响应式数据，如 Vue 的响应式、Mbox 的响应式。</p><p>观察者模式有完成整个流程需要两个角色：</p><ul><li>  目标</li><li>  观察者</li></ul><p>简单流程如下：</p><p><strong>目标&lt;=&gt;观察者</strong>，观察者观察目标（监听目标）-&gt; 目标发生变化-&gt; 目标主动通知观察者。</p><p>简单的代码实现如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 观察监听一个对象成员的变化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Object&#125; obj 观察的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;String&#125; targetVariable 观察的对象成员</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Function&#125; callback 目标变化触发的回调</span><br><span class="hljs-comment"> */</span><br>function observer(obj, targetVariable, callback) &#123;<br>  <span class="hljs-keyword">if</span> (!obj.<span class="hljs-keyword">data</span>) &#123;<br>    obj.<span class="hljs-keyword">data</span> = &#123;&#125;<br>  &#125;<br>  Object.defineProperty(obj, targetVariable, &#123;<br>    <span class="hljs-keyword">get</span>() &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>[targetVariable]<br>    &#125;,<br>    <span class="hljs-keyword">set</span>(<span class="hljs-keyword">val</span>) &#123;<br>      <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>[targetVariable] = <span class="hljs-keyword">val</span><br>      <span class="hljs-comment">// 目标主动通知观察者</span><br>      callback &amp;&amp; callback(<span class="hljs-keyword">val</span>)<br>    &#125;,<br>  &#125;)<br>  <span class="hljs-keyword">if</span> (obj.<span class="hljs-keyword">data</span>[targetVariable]) &#123;<br>    callback &amp;&amp; callback(obj.<span class="hljs-keyword">data</span>[targetVariable])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可运行例子如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    &lt;meta<br>      name=&quot;viewport&quot;<br>      content=&quot;width=device-width,initial-scale=1,maximum-scale=1,viewport-fit=cover&quot;<br>    /&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dom-one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dom-two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>改变<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      /**<br>       * 观察监听一个对象成员的变化<br><span class="javascript">       * @param &#123;<span class="hljs-built_in">Object</span>&#125; obj 观察的对象</span><br><span class="javascript">       * @param &#123;<span class="hljs-built_in">String</span>&#125; targetVariable 观察的对象成员</span><br><span class="javascript">       * @param &#123;<span class="hljs-built_in">Function</span>&#125; callback 目标变化触发的回调</span><br>       */<br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observer</span>(<span class="hljs-params">obj, targetVariable, callback</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (!obj.data) &#123;</span><br>          obj.data = &#123;&#125;<br>        &#125;<br><span class="javascript">        <span class="hljs-built_in">Object</span>.defineProperty(obj, targetVariable, &#123;</span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data[targetVariable]</span><br>          &#125;,<br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.data[targetVariable] = val</span><br><span class="javascript">            <span class="hljs-comment">// 目标主动通知观察者</span></span><br>            callback &amp;&amp; callback(val)<br>          &#125;,<br>        &#125;)<br><span class="javascript">        <span class="hljs-keyword">if</span> (obj.data[targetVariable]) &#123;</span><br>          callback &amp;&amp; callback(obj.data[targetVariable])<br>        &#125;<br>      &#125;<br><br><span class="javascript">      <span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="javascript">        data: &#123; <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;原始值&#x27;</span> &#125;,</span><br>      &#125;<br><br><span class="javascript">      observer(obj, <span class="hljs-string">&#x27;description&#x27;</span>, <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#dom-one&#x27;</span>).innerHTML = value</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#dom-two&#x27;</span>).innerHTML = value</span><br>      &#125;)<br><br><span class="javascript">      btn.onclick = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        obj.description = <span class="hljs-string">&#x27;改变了&#x27;</span></span><br>      &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="两者的区别在哪？"><a href="#两者的区别在哪？" class="headerlink" title="两者的区别在哪？"></a>两者的区别在哪？</h2><p>角色角度来看，订阅发布模式需要三种角色，发布者、事件中心和订阅者。二观察者模式需要两种角色，目标和观察者，无事件中心负责通信。</p><p>从耦合度上来看，订阅发布模式是一个事件中心调度模式，订阅者和发布者是没有直接关联的，通过事件中心进行关联，两者是<strong>解耦</strong>的。而观察者模式中目标和观察者是直接关联的，<strong>耦合在一起</strong>（有些观念说观察者是解耦，解耦的是业务代码，不是目标和观察者本身）。</p><h2 id="两者的优缺点？"><a href="#两者的优缺点？" class="headerlink" title="两者的优缺点？"></a>两者的优缺点？</h2><p>优缺点都是从前端角度来看的。</p><h3 id="订阅发布模式优点"><a href="#订阅发布模式优点" class="headerlink" title="订阅发布模式优点"></a>订阅发布模式优点</h3><ul><li><p>灵活</p><p>  由于订阅发布模式的发布者和订阅者是<strong>解耦</strong>的，只要引入订阅发布模式的事件中心，无论在何处都可以发布订阅。同时订阅发布者相互之间不影响。</p></li></ul><p>订阅发布模式在使用不当的情况下，容易造成数据流混乱，所以才有了 React 提出的单项数据流思想，就是为了解决数据流混乱的问题。</p><h3 id="订阅发布模式缺点"><a href="#订阅发布模式缺点" class="headerlink" title="订阅发布模式缺点"></a>订阅发布模式缺点</h3><ul><li><p>容易导致代码不好维护</p><p>  灵活是有点，同时也是缺点，使用不当就会造成数据流混乱，导致代码不好维护。</p></li><li><p>性能消耗更大</p><p>  订阅发布模式需要维护事件列队，订阅的事件越多，内存消耗越大。</p></li></ul><h3 id="观察者模式优点"><a href="#观察者模式优点" class="headerlink" title="观察者模式优点"></a>观察者模式优点</h3><ul><li><p>响应式</p><p>  目标变化就会通知观察者，这是观察者最大的有点，也是因为这个优点，观察者模式在前端才会这么出名。</p></li></ul><h3 id="观察者模式缺点"><a href="#观察者模式缺点" class="headerlink" title="观察者模式缺点"></a>观察者模式缺点</h3><ul><li><p>不灵活</p><p>  相比订阅发布模式，由于目标和观察者是耦合在一起的，所以观察者模式需要同时引入目标和观察者才能达到响应式的效果。而订阅发布模式只需要引入事件中心，订阅者和发布者可以不再一处。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/onepixel/p/10806891.html">订阅发布模式和观察者模式真的不一样</a></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eval详解</title>
    <link href="/6b8bbae503f2/"/>
    <url>/6b8bbae503f2/</url>
    
    <content type="html"><![CDATA[<h1 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h1><h2 id="eval-强制运行在全局作用域"><a href="#eval-强制运行在全局作用域" class="headerlink" title="eval() 强制运行在全局作用域"></a><code>eval()</code> 强制运行在全局作用域</h2><p>eval函数是强大的数码转换引擎,字符串经eval转换后得到一个javascript对象,<br>举简单例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 等效于var a = 5;</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;5&quot;</span>);<br><br><span class="hljs-comment">// 等效于var a = &#x27;5&#x27;;</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;&#x27;5&#x27;&quot;</span>);<br><br><span class="hljs-comment">// 等效于 var obj = &#123;name:&#x27;cat&#x27;,color:&#x27;black&#x27;&#125;;</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;(&#123;name:&#x27;cat&#x27;,color:&#x27;black&#x27;&#125;)&quot;</span>);<br><br><span class="hljs-comment">// 等效于 alert(&#x27;hello world!&#x27;);</span><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;alert(&#x27;hello world!&#x27;);&quot;</span>);<br></code></pre></td></tr></table></figure><p>js的数据类型为弱类型,可以在定义的时候指定数据类型,也可以在运算过程中强制数据类型转换</p><p>一个对象经过eval转换后数据类型不确定,在相加过程中自动与其他数据类型一致</p><p><code>eval(str)</code> 用来传入一个字符串动态执行一段脚本，这个方法非常有用。当直接用 <code>eval()</code> 时，作用域为当前作用域，有时候我们需要让它在全局作用域范围内执行，比如 ajax返回的脚本字符串，然而浏览器对eval的差异可能使事情刚开始并不是那么顺利，本文通过在7种浏览器(IE, Firefox, Chrome, Safari, Opera）环境中测试，并提出三种解决方案，使这个问题比较完美的解决。</p><p>看这一段javascript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xx</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> x= <span class="hljs-number">1</span> ;<br>    <span class="hljs-built_in">window</span>.eval( <span class="hljs-string">&#x27;var x=3;&#x27;</span> );<br>    <span class="hljs-built_in">document</span> .writeln(x);<br>&#125;<br>xx();<br></code></pre></td></tr></table></figure><p>在你自己测试和看我接下来的分析之前，先想想，你认为输出结果会是什么呢？是  <code>1</code> 还是 <code>3</code> ？</p><p>根据本文的标题，可知肯定是在不同浏览器下有不同表现的。</p><p>以下是我的实测数据：</p><table><thead><tr><th>浏览器</th><th>版本</th><th>运行</th></tr></thead><tbody><tr><td>IE</td><td>7.0</td><td>3</td></tr><tr><td>IE</td><td>8.0</td><td>3</td></tr><tr><td>Firefox</td><td>3.0.8</td><td>1</td></tr><tr><td>Chrome</td><td>1.0</td><td>3</td></tr><tr><td>Chrome</td><td>4.0</td><td>1</td></tr><tr><td>Safari</td><td>4.0.2</td><td>1</td></tr><tr><td>Opera</td><td>9.62</td><td>1</td></tr></tbody></table><p>可见各浏览器及版本对<code>window.eval()</code>的作用域处理是有差异的。</p><p>IE中，<code>window.eval()</code> 和 <code>eval()</code>一样只在当前作用域生效。</p><p>Firefox，Safari，Opera中，直接调用eval()为当前作用域，window.eval()调用为全局作用域。</p><p>尤其值得注意的是，Google Chrome 的不同版本之间对于eval的处理也有差异。</p><p>如果需要在全局作用域eval()的效果，且通用于所有浏览器，那就得好好变通一下了。</p><h4 id="方法之一："><a href="#方法之一：" class="headerlink" title="方法之一："></a>方法之一：</h4><p>使用IE专有的 <code>window.execScript</code> 。</p><p>如果你碰到这个问题不知所措，并上网搜索，这个方法大概是最先也几乎唯一能搜索到的方法。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">window</span>.execScript (sExpression , sLanguage )。<br></code></pre></td></tr></table></figure><p>比如上面那一段代码中eval一句如果换成 <code>window.execScript( &#39;var x=3;&#39;);</code> IE中的运行结果就是1了。</p><p>==非IE内核的浏览器并不支持 <code>window.execScript</code>。==</p><p>IE之所以有这个 <code>window.execScript</code> ，还和IE能够执行其他语言的脚本有关，通过给不同的 <code>sLanguage</code> 参数，IE这个方法除能够执行 <code>javascript</code> 之外，还可以执行 <code>vbscript</code> 或是其他任何安装过相应解释引擎的脚本如 <code>perl</code> , <code>python</code> 等。</p><p>当需要在局部环境中执行的时候，我们就直接用 <code>eval()</code>。</p><p>当需要在全局环境中执行的时候，我们可以封装一个通用的函数，就像下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在全局环境中执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evalGlobal</span>(<span class="hljs-params">strScript</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>( <span class="hljs-built_in">window</span>.execScript) &#123;<br>        <span class="hljs-built_in">window</span>.execScript(strScript);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">window</span>.eval(strScript );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就是将IE和非IE区别开来对待。</p><p>看起来，问题似乎圆满解决了。但是显然是有问题的，比如上表中的 Chrome 1.0 也和 IE 的 <code>eval()</code> 规则一致，况且还不知道其他浏览器其他版本是否有差异呢，因此，这种方法并不很可靠。</p><p>但是如果你有一点完美主义者的倾向，那么事情还不能到此为止，肯定是有更好更简洁的方法的嘛。</p><h3 id="方法之二："><a href="#方法之二：" class="headerlink" title="方法之二："></a>方法之二：</h3><p>新建一个<code>&lt;script&gt;</code>元素装载脚本。</p><p>这种方法常用来解决 <code>innerHTML</code> 中的脚本不能运行的问题。但用来解决 <code>eval()</code> 的作用域问题，恐怕就比较罕见了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在全局环境中执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evalGlobal</span>(<span class="hljs-params">strScript</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement (<span class="hljs-string">&quot;script&quot;</span> );<br>    a.type= <span class="hljs-string">&quot;text/javascript&quot;</span> ;<br>    a.text= strScript ;<br>    <span class="hljs-built_in">document</span>.getElementsByTagName (<span class="hljs-string">&quot;head&quot;</span> )[<span class="hljs-number">0</span>].appendChild(a);<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然这个方法有点变态，需要新增一个<code>&lt;script&gt;</code>元素，但优点是各种浏览器及版本通用，比方法一要好一些了。。</p><p>但是如果你有再多一点完美主义者的倾向，那么事情还不能到此为止，毕竟添加了一个HTML元素嘛，影响了页面原本的DOM结构。</p><h3 id="方法之三："><a href="#方法之三：" class="headerlink" title="方法之三："></a>方法之三：</h3><p>还是eval。回归原生态。</p><p>我们 别忘了 <code>javascript</code> 里面有一个改变上下文环境的关键字，强大的 <code>with</code></p><p>原来事情可以更简单更有效！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在全局环境中执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evalGlobal</span>(<span class="hljs-params">strScript</span>)</span>&#123;<br>    <span class="hljs-keyword">with</span>(<span class="hljs-built_in">window</span>)<span class="hljs-built_in">eval</span>(strScript) ;<br>&#125;<br></code></pre></td></tr></table></figure><p>文章最开始的代码我们就可以这样来了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xx</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;var x=1;&#x27;</span>);  <span class="hljs-comment">// 局部变量</span><br>    <span class="hljs-function"><span class="hljs-title">with</span>(<span class="hljs-params"><span class="hljs-built_in">window</span></span>)</span>&#123;<br>        <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;var x=3;&#x27;</span>);<br>    &#125;   <span class="hljs-comment">//全局变量</span><br>    <span class="hljs-comment">//也可以用封装的 evalGlobal( &#x27;var x=3&#x27; );</span><br>    <span class="hljs-built_in">document</span>.writeln(x); <span class="hljs-comment">// 1 局部变量</span><br>    <span class="hljs-built_in">document</span>.writeln(<span class="hljs-built_in">window</span>.x); <span class="hljs-comment">// 3 全局变量</span><br>&#125;<br>xx();<br></code></pre></td></tr></table></figure><p>特别：</p><p>有时候，我们<code>eval()</code>要求既不是在全局执行，也不是在当前作用域执行，而是在父对象或子对象中执行，这时，用 <code>with(objContext)eval(strScript)</code>就更加是不可替代的选择了。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>让 <code>eval()</code> 全局作用域执行的方法主要有：</p><p>（1）<code>window.execScript</code> + <code>window.eval</code>    级别：弱。 缺点：不简洁，不可靠，不通用。</p><p>（2）<code>document.createElement(&quot;script&quot;)</code>    级别：凑合。缺点：不简洁，不干净。优点：可靠，通用。</p><p>（3）<code>with(objContext)eval(strScript)</code>          级别：最佳。优点：简洁，干净，可靠，通用。</p><table><thead><tr><th>让 <code>eval()</code> 全局作用域执行的方法</th><th>级别</th><th>缺点</th><th>优点</th></tr></thead><tbody><tr><td><code>window.execScript</code> + <code>window.eval</code></td><td>弱</td><td>不简洁，不可靠，不通用</td><td>-</td></tr><tr><td><code>document.createElement(&quot;script&quot;) </code></td><td>凑合</td><td>不简洁，不干净</td><td>可靠，通用</td></tr><tr><td><code>with(window)eval(strScript)</code></td><td>最佳</td><td>-</td><td>简洁，干净，可靠，通用</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Github Actions 自动部署 Hexo 博客</title>
    <link href="/f39489bf236f/"/>
    <url>/f39489bf236f/</url>
    
    <content type="html"><![CDATA[<h1 id="利用-Github-Actions-自动部署-Hexo-博客"><a href="#利用-Github-Actions-自动部署-Hexo-博客" class="headerlink" title="利用 Github Actions 自动部署 Hexo 博客"></a>利用 Github Actions 自动部署 Hexo 博客</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Github Actions 可以很方便实现 CI/CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。当我们运行 Jobs 时，它会创建一个容器 (runner)，容器支持：Ubuntu、Windows 和 MacOS 等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p><p>本文将介绍利用 Github Actions 实现自动部署 hexo 到 Github Pages，在之前我们需要写完文章执行 <code>hexo generate --deploy</code> 来部署，当你文章比较多的时候，可能还需要等待很久，而且还可能会遇到本地安装的 Node.js 版本与 Hexo 不兼容的问题，目前我就是因为电脑的 Node.js 版本升到 v14 版本导致与 Hexo 不兼容部署不了，才来捣腾 Github Actions 功能的。利用 Github Actions 你将会没有这些烦恼。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><h3 id="创建所需仓库"><a href="#创建所需仓库" class="headerlink" title="创建所需仓库"></a>创建所需仓库</h3><ol><li> 创建 <code>blog</code> 仓库用来存放 Hexo 项目</li><li> 创建 <code>your.github.io</code> 仓库用来存放静态博客页面</li></ol><h3 id="在-config-yml-配置中配置-your-github-io"><a href="#在-config-yml-配置中配置-your-github-io" class="headerlink" title="在 _config.yml 配置中配置 your.github.io"></a>在 <code>_config.yml</code> 配置中配置 <code>your.github.io</code></h3><p><img src="https://img.iamcoder.info/uPic/5ljjOG2020120518522816071655481607165548050u7TBxV.jpg" alt="5ljjOG2020120518522816071655481607165548050u7TBxV"></p><p>这里注意要修改 <code>_config.yml</code> <code>repo</code><br>如果原来手动的发布是 http 的，要改为 ssh 格式</p><p>如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:<br>  # <span class="hljs-attribute">repo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/ASmallBean/ASmallBean</span><br>  <span class="hljs-attribute">repo</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:ASmallBean/ASmallBean.github.io.git<br></code></pre></td></tr></table></figure><h3 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a>生成部署密钥</h3><p>一路按回车直到生成成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> ssh<span class="hljs-literal">-keygen</span> <span class="hljs-operator">-f</span> github<span class="hljs-literal">-deploy</span><span class="hljs-literal">-key</span><br></code></pre></td></tr></table></figure><p>当前目录下会有 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code> 两个文件。</p><h3 id="配置部署密钥"><a href="#配置部署密钥" class="headerlink" title="配置部署密钥"></a>配置部署密钥</h3><p>复制 <code>github-deploy-key</code> 文件内容，在 <code>blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p><ol><li> 在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI</code>。</li><li> 在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li></ol><p><img src="https://img.iamcoder.info/uPic/popdGK20201205185245160716556516071655655330lUD0I.jpg" alt="popdGK20201205185245160716556516071655655330lUD0I"></p><p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>your.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p><ol><li> 在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</li><li> 在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</li><li> 勾选 <code>Allow write access</code> 选项。</li></ol><p><img src="https://img.iamcoder.info/uPic/ZBeHoY2020120518525816071655781607165578103Pb4Lbf.jpg" alt="ZBeHoY2020120518525816071655781607165578103Pb4Lbf"></p><h2 id="编写-Github-Actions"><a href="#编写-Github-Actions" class="headerlink" title="编写 Github Actions"></a>编写 Github Actions</h2><h3 id="Workflow-模版"><a href="#Workflow-模版" class="headerlink" title="Workflow 模版"></a>Workflow 模版</h3><p>在 <code>blog</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，目录结构如下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">blog</span> (<span class="hljs-selector-tag">repository</span>)<br>└── <span class="hljs-selector-class">.github</span><br> └── <span class="hljs-selector-tag">workflows</span><br> └── <span class="hljs-selector-tag">deploy</span><span class="hljs-selector-class">.yml</span><br></code></pre></td></tr></table></figure><p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-attribute">name</span>: deploy gh-pages<br><br><span class="hljs-attribute">on:</span><br>  push:<br>    branches: [ main ]<br><br><span class="hljs-attribute">env:</span><br>  GIT_USER: ASmallBean<br>  GIT_EMAIL: monkeydreamgo@gmail.com<br><br><span class="hljs-attribute">jobs:</span><br>  build:<br>    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;<br>    runs-on: ubuntu-latest<br>    strategy:<br>      matrix:<br>        os: [ubuntu-latest]<br>        node-version: [14.x]<br><br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v2<br>      - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;<br>        uses: actions/setup-node@v1<br>        with:<br>          node-version: $&#123;&#123; matrix.node-version &#125;&#125;<br>      - name: Configuration environment<br>        env:<br>          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;<br>        run: |<br>          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;<br>          mkdir -p ~/.ssh/<br>          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa<br>          chmod 600 ~/.ssh/id_rsa<br>          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts<br>          git config --global user.name $GIT_USER<br>          git config --global user.email $GIT_EMAIL<br><br>      - name: Install dependencies<br>        run: |<br>          npm install<br>          npm i -g hexo-cli<br>      - name: Deploy hexo<br>        run: |<br>          npm run deploy<br></code></pre></td></tr></table></figure><h3 id="模版参数说明"><a href="#模版参数说明" class="headerlink" title="模版参数说明"></a>模版参数说明</h3><ul><li>  <em>name</em> 为此 Action 的名字</li><li>  <em>on</em> 触发条件，当满足条件时会触发此任务，这里的 <code>on.push.branches.$.master</code> 是指当 <code>master</code> 分支收到 <code>push</code> 后执行任务。</li><li><em>env</em> 为环境变量对象<ul><li>  _env.GIT_USER_ 为 Hexo 编译后使用此 git 用户部署到仓库。</li><li>  _env.GIT_EMAIL_ 为 Hexo 编译后使用此 git 邮箱部署到仓库。</li></ul></li><li><em>jobs</em> 为此 Action 下的任务列表<ul><li>  <em>jobs.{job}.name</em> 任务名称</li><li>  <em>jobs.{job}.runs-on</em> 任务所需容器，可选值：<code>ubuntu-latest</code>、<code>windows-latest</code>、<code>macos-latest</code>。</li><li>  <em>jobs.{job}.strategy</em> 策略下可以写 <code>array</code> 格式，此 job 会遍历此数组执行。</li><li><em>jobs.{job}.steps</em> 一个步骤数组，可以把所要干的事分步骤放到这里。<ul><li>  <em>jobs.{job}.steps.$.name</em> 步骤名，编译时会会以 LOG 形式输出。</li><li>  <em>jobs.{job}.steps.$.uses</em> 所要调用的 Action，可以到 <a href="https://github.com/actions">https://github.com/actions</a> 查看更多。</li><li>  <em>jobs.{job}.steps.$.with</em> 一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。</li></ul></li></ul></li></ul><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>当任务完成后查看您的博客 <code>https://your.github.io</code>，如果不出意外的话已经可以看到新添加的文章了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Makefile</title>
    <link href="/227fdb865965/"/>
    <url>/227fdb865965/</url>
    
    <content type="html"><![CDATA[<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><p>转自阮一峰</p><p>代码变成可执行文件，叫做<a href="http://www.ruanyifeng.com/blog/2014/11/compiler.html">编译</a>（compile）；先编译这个，还是先编译那个（即编译的安排），叫做<a href="http://en.wikipedia.org/wiki/Software_build">构建</a>（build）。</p><p><a href="http://en.wikipedia.org/wiki/Make_%28software%29">Make</a>是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。</p><p>本文介绍Make命令的用法，从简单的讲起，不需要任何基础，只要会使用命令行，就能看懂。我的参考资料主要是Isaac Schlueter的<a href="https://gist.github.com/isaacs/62a2d1825d04437c6f08">《Makefile文件教程》</a>和<a href="https://www.gnu.org/software/make/manual/make.html">《GNU Make手册》</a>。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015022001.jpg?i=200981230"></p><p>（题图：摄于博兹贾阿达岛，土耳其，2013年7月）</p><h2 id="一、Make的概念"><a href="#一、Make的概念" class="headerlink" title="一、Make的概念"></a>一、Make的概念</h2><p>Make这个词，英语的意思是”制作”。Make命令直接用了这个意思，就是要做出某个文件。比如，要做出文件a.txt，就可以执行下面的命令。</p><blockquote><pre><code>$ make a.txt</code></pre></blockquote><p>但是，如果你真的输入这条命令，它并不会起作用。因为Make命令本身并不知道，如何做出a.txt，需要有人告诉它，如何调用其他命令完成这个目标。</p><p>比如，假设文件 a.txt 依赖于 b.txt 和 c.txt ，是后面两个文件连接（cat命令）的产物。那么，make 需要知道下面的规则。</p><blockquote><pre><code>a.txt: b.txt c.txt    cat b.txt c.txt &gt; a.txt</code></pre></blockquote><p>也就是说，make a.txt 这条命令的背后，实际上分成两步：第一步，确认 b.txt 和 c.txt 必须已经存在，第二步使用 cat 命令 将这个两个文件合并，输出为新文件。</p><p>像这样的规则，都写在一个叫做Makefile的文件中，Make命令依赖这个文件进行构建。Makefile文件也可以写为makefile， 或者用命令行参数指定为其他文件名。</p><blockquote><pre><code>$ make -f rules.txt# 或者$ make --file=rules.txt</code></pre></blockquote><p>上面代码指定make命令依据rules.txt文件中的规则，进行构建。</p><p>总之，make只是一个根据指定的Shell命令进行构建的工具。它的规则很简单，你规定要构建哪个文件、它依赖哪些源文件，当那些文件有变动时，如何重新构建它。</p><h2 id="二、Makefile文件的格式"><a href="#二、Makefile文件的格式" class="headerlink" title="二、Makefile文件的格式"></a>二、Makefile文件的格式</h2><p>构建规则都写在Makefile文件里面，要学会如何Make命令，就必须学会如何编写Makefile文件。</p><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>Makefile文件由一系列规则（rules）构成。每条规则的形式如下。</p><blockquote><pre><code>&lt;target&gt; : &lt;prerequisites&gt;[tab]  &lt;commands&gt;</code></pre></blockquote><p>上面第一行冒号前面的部分，叫做”目标”（target），冒号后面的部分叫做”前置条件”（prerequisites）；第二行必须由一个tab键起首，后面跟着”命令”（commands）。</p><p>“目标”是必需的，不可省略；”前置条件”和”命令”都是可选的，但是两者之中必须至少存在一个。</p><p>每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。下面就详细讲解，每条规则的这三个组成部分。</p><h3 id="2-2-目标（target）"><a href="#2-2-目标（target）" class="headerlink" title="2.2 目标（target）"></a>2.2 目标（target）</h3><p>一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象，比如上文的 a.txt 。目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。</p><p>除了文件名，目标还可以是某个操作的名字，这称为”伪目标”（phony target）。</p><blockquote><pre><code>clean:      rm *.o</code></pre></blockquote><p>上面代码的目标是clean，它不是文件名，而是一个操作的名字，属于”伪目标 “，作用是删除对象文件。</p><blockquote><pre><code>$ make  clean</code></pre></blockquote><p>但是，如果当前目录中，正好有一个文件叫做clean，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。</p><p>为了避免这种情况，可以明确声明clean是”伪目标”，写法如下。</p><blockquote><pre><code>.PHONY: cleanclean:        rm *.o temp</code></pre></blockquote><p>声明clean是”伪目标”之后，make就不会去检查是否存在一个叫做clean的文件，而是每次运行都执行对应的命令。像.PHONY这样的内置目标名还有不少，可以查看[手册](<a href="http://www.gnu.org/software/make/manual/html_node/Special-Targets.html">http://www.gnu.org/software/make/manual/html_node/Special-Targets.html</a> target=)。</p><p>如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。</p><blockquote><pre><code>$ make</code></pre></blockquote><p>上面代码执行Makefile文件的第一个目标。</p><h3 id="2-3-前置条件（prerequisites）"><a href="#2-3-前置条件（prerequisites）" class="headerlink" title="2.3 前置条件（prerequisites）"></a>2.3 前置条件（prerequisites）</h3><p>前置条件通常是一组文件名，之间用空格分隔。它指定了”目标”是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），”目标”就需要重新构建。</p><blockquote><pre><code>result.txt: source.txt    cp source.txt result.txt</code></pre></blockquote><p>上面代码中，构建 result.txt 的前置条件是 source.txt 。如果当前目录中，source.txt 已经存在，那么<code>make result.txt</code>可以正常运行，否则必须再写一条规则，来生成 source.txt 。</p><blockquote><pre><code>source.txt:    echo &quot;this is the source&quot; &gt; source.txt</code></pre></blockquote><p>上面代码中，source.txt后面没有前置条件，就意味着它跟其他文件都无关，只要这个文件还不存在，每次调用<code>make source.txt</code>，它都会生成。</p><blockquote><pre><code>$ make result.txt$ make result.txt</code></pre></blockquote><p>上面命令连续执行两次<code>make result.txt</code>。第一次执行会先新建 source.txt，然后再新建 result.txt。第二次执行，Make发现 source.txt 没有变动（时间戳晚于 result.txt），就不会执行任何操作，result.txt 也不会重新生成。</p><p>如果需要生成多个文件，往往采用下面的写法。</p><blockquote><pre><code>source: file1 file2 file3</code></pre></blockquote><p>上面代码中，source 是一个伪目标，只有三个前置文件，没有任何对应的命令。</p><blockquote><pre><code>$ make source</code></pre></blockquote><p>执行<code>make source</code>命令后，就会一次性生成 file1，file2，file3 三个文件。这比下面的写法要方便很多。</p><blockquote><pre><code>$ make file1$ make file2$ make file3</code></pre></blockquote><h3 id="2-4-命令（commands）"><a href="#2-4-命令（commands）" class="headerlink" title="2.4 命令（commands）"></a>2.4 命令（commands）</h3><p>命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建”目标”的具体指令，它的运行结果通常就是生成目标文件。</p><p>每行命令之前必须有一个tab键。如果想用其他键，可以用内置变量.RECIPEPREFIX声明。</p><blockquote><pre><code>.RECIPEPREFIX = &gt;all:&gt; echo Hello, world</code></pre></blockquote><p>上面代码用.RECIPEPREFIX指定，大于号（&gt;）替代tab键。所以，每一行命令的起首变成了大于号，而不是tab键。</p><p>需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。</p><blockquote><pre><code>var-lost:    export foo=bar    echo &quot;foo=[$$foo]&quot;</code></pre></blockquote><p>上面代码执行后（<code>make var-lost</code>），取不到foo的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔。</p><blockquote><pre><code>var-kept:    export foo=bar; echo &quot;foo=[$$foo]&quot;</code></pre></blockquote><p>另一个解决办法是在换行符前加反斜杠转义。</p><blockquote><pre><code>var-kept:    export foo=bar; \    echo &quot;foo=[$$foo]&quot;</code></pre></blockquote><p>最后一个方法是加上<code>.ONESHELL:</code>命令。</p><blockquote><pre><code>.ONESHELL:var-kept:    export foo=bar;    echo &quot;foo=[$$foo]&quot;</code></pre></blockquote><h2 id="三、Makefile文件的语法"><a href="#三、Makefile文件的语法" class="headerlink" title="三、Makefile文件的语法"></a>三、Makefile文件的语法</h2><h3 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h3><p>井号（#）在Makefile中表示注释。</p><blockquote><pre><code># 这是注释result.txt: source.txt    # 这是注释    cp source.txt result.txt # 这也是注释</code></pre></blockquote><h3 id="3-2-回声（echoing）"><a href="#3-2-回声（echoing）" class="headerlink" title="3.2 回声（echoing）"></a>3.2 回声（echoing）</h3><p>正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。</p><blockquote><pre><code>test:    # 这是测试</code></pre></blockquote><p>执行上面的规则，会得到下面的结果。</p><blockquote><pre><code>$ make test# 这是测试</code></pre></blockquote><p>在命令的前面加上@，就可以关闭回声。</p><blockquote><pre><code>test:    @# 这是测试</code></pre></blockquote><p>现在再执行<code>make test</code>，就不会有任何输出。</p><p>由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@。</p><blockquote><pre><code>test:    @# 这是测试    @echo TODO</code></pre></blockquote><h3 id="3-3-通配符"><a href="#3-3-通配符" class="headerlink" title="3.3 通配符"></a>3.3 通配符</h3><p>通配符（wildcard）用来指定一组符合条件的文件名。Makefile 的通配符与 Bash 一致，主要有星号（*）、问号（？）和 […] 。比如， *.o 表示所有后缀名为o的文件。</p><blockquote><pre><code>clean:        rm -f *.o</code></pre></blockquote><h3 id="3-4-模式匹配"><a href="#3-4-模式匹配" class="headerlink" title="3.4 模式匹配"></a>3.4 模式匹配</h3><p>Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。</p><blockquote><pre><code>%.o: %.c</code></pre></blockquote><p>等同于下面的写法。</p><blockquote><pre><code>f1.o: f1.cf2.o: f2.c</code></pre></blockquote><p>使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。</p><h3 id="3-5-变量和赋值符"><a href="#3-5-变量和赋值符" class="headerlink" title="3.5 变量和赋值符"></a>3.5 变量和赋值符</h3><p>Makefile 允许使用等号自定义变量。</p><blockquote><pre><code>txt = Hello Worldtest:    @echo $(txt)</code></pre></blockquote><p>上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 <code>$( )</code> 之中。</p><p>调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。</p><blockquote><pre><code>test:    @echo $$HOME</code></pre></blockquote><p>有时，变量的值可能指向另一个变量。</p><blockquote><pre><code>v1 = $(v2)</code></pre></blockquote><p>上面代码中，变量 v1 的值是另一个变量 v2。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）？如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。</p><p>为了解决类似问题，Makefile一共提供了四个赋值运算符 （=、:=、？=、+=），它们的区别请看<a href="http://stackoverflow.com/questions/448910/makefile-variable-assignment">StackOverflow</a>。</p><blockquote><pre><code>VARIABLE = value# 在执行时扩展，允许递归扩展。VARIABLE := value# 在定义时扩展。VARIABLE ?= value# 只有在该变量为空时才设置值。VARIABLE += value# 将值追加到变量的尾端。</code></pre></blockquote><h3 id="3-6-内置变量（Implicit-Variables）"><a href="#3-6-内置变量（Implicit-Variables）" class="headerlink" title="3.6 内置变量（Implicit Variables）"></a>3.6 内置变量（Implicit Variables）</h3><p>Make命令提供一系列内置变量，比如，<code>$(CC)</code> 指向当前使用的编译器，<code>$(MAKE)</code> 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html">手册</a>。</p><blockquote><pre><code>output:    $(CC) -o output input.c</code></pre></blockquote><h3 id="3-7-自动变量（Automatic-Variables）"><a href="#3-7-自动变量（Automatic-Variables）" class="headerlink" title="3.7 自动变量（Automatic Variables）"></a>3.7 自动变量（Automatic Variables）</h3><p>Make命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。</p><p><strong>（1）<code>$@</code></strong></p><p><code>$@</code>指代当前目标，就是Make命令当前构建的那个目标。比如，<code>make foo</code>的 <code>$@</code> 就指代foo。</p><blockquote><pre><code>a.txt b.txt:    touch $@</code></pre></blockquote><p>等同于下面的写法。</p><blockquote><pre><code>a.txt:    touch a.txtb.txt:    touch b.txt</code></pre></blockquote><p><strong>（2）<code>$&lt;</code></strong></p><p><code>$&lt;</code> 指代第一个前置条件。比如，规则为 t: p1 p2，那么<code>$&lt;</code> 就指代p1。</p><blockquote><pre><code>a.txt: b.txt c.txt    cp $&lt; $@</code></pre></blockquote><p>等同于下面的写法。</p><blockquote><pre><code>a.txt: b.txt c.txt    cp b.txt a.txt</code></pre></blockquote><p><strong>（3）<code>$?</code></strong></p><p><code>$?</code> 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，<code>$?</code>就指代p2。</p><p><strong>（4）<code>$^</code></strong></p><p><code>$^</code> 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 <code>$^</code> 就指代 p1 p2 。</p><p><strong>（5）<code>$\*</code></strong></p><p><code>$\*</code> 指代匹配符 <code>%</code> 匹配的部分， 比如 <code>%</code> 匹配 f1.txt 中的f1 ，<code>$\*</code> 就表示 f1。</p><p><strong>（6）<code>$(@D)</code> 和 <code>$(@F)</code></strong></p><p><code>$(@D)</code> 和 <code>$(@F)</code> 分别指向 <code>$@</code> 的 <strong>目录名</strong> 和 <strong>文件名</strong>。比如，<code>$@</code> 是 <strong>src/input.c</strong>，那么 <code>$(@D)</code> 的值为 <strong>src</strong> ，<code>$(@F)</code> 的值为 <strong>input.c</strong>。</p><p><strong>（7）<code>$(&lt;D)</code> 和 <code>$(&lt;F)</code></strong></p><p><code>$(&lt;D)</code> 和 <code>$(&lt;F)</code> 分别指向 <code>$&lt;</code> 的目录名和文件名。</p><p>所有的自动变量清单，请看<a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">手册</a>。下面是自动变量的一个例子。</p><blockquote><pre><code>dest/%.txt: src/%.txt    @[ -d dest ] || mkdir dest    cp $&lt; $@</code></pre></blockquote><p>上面代码将 src 目录下的 txt 文件，拷贝到 dest 目录下。首先判断 dest 目录是否存在，如果不存在就新建，然后，<code>$&lt;</code> 指代前置文件（src/%.txt）， <code>$@</code> 指代目标文件（dest/%.txt）。</p><h3 id="3-8-判断和循环"><a href="#3-8-判断和循环" class="headerlink" title="3.8 判断和循环"></a>3.8 判断和循环</h3><p>Makefile使用 Bash 语法，完成判断和循环。</p><blockquote><pre><code>ifeq ($(CC),gcc)  libs=$(libs_for_gcc)else  libs=$(normal_libs)endif</code></pre></blockquote><p>上面代码判断当前编译器是否 gcc ，然后指定不同的库文件。</p><blockquote><pre><code>LIST = one two threeall:    for i in $(LIST); do \        echo $$i; \    done# 等同于all:    for i in one two three; do \        echo $i; \    done</code></pre></blockquote><p>上面代码的运行结果。</p><blockquote><pre><code>onetwothree</code></pre></blockquote><h3 id="3-9-函数"><a href="#3-9-函数" class="headerlink" title="3.9 函数"></a>3.9 函数</h3><p>Makefile 还可以使用函数，格式如下。</p><blockquote><pre><code>$(function arguments)# 或者$&#123;function arguments&#125;</code></pre></blockquote><p>Makefile提供了许多<a href="http://www.gnu.org/software/make/manual/html_node/Functions.html">内置函数</a>，可供调用。下面是几个常用的内置函数。</p><p><strong>（1）shell 函数</strong></p><p>shell 函数用来执行 shell 命令</p><blockquote><pre><code>srcfiles := $(shell echo src/&#123;00..99&#125;.txt)</code></pre></blockquote><p><strong>（2）wildcard 函数</strong></p><p>wildcard 函数用来在 Makefile 中，替换 Bash 的通配符。</p><blockquote><pre><code>srcfiles := $(wildcard src/*.txt)</code></pre></blockquote><p><strong>（3）subst 函数</strong></p><p>subst 函数用来文本替换，格式如下。</p><blockquote><pre><code>$(subst from,to,text)</code></pre></blockquote><p>下面的例子将字符串”feet on the street”替换成”fEEt on the strEEt”。</p><blockquote><pre><code>$(subst ee,EE,feet on the street)</code></pre></blockquote><p>下面是一个稍微复杂的例子。</p><blockquote><pre><code>comma:= ,empty:=# space变量用两个空变量作为标识符，当中是一个空格space:= $(empty) $(empty)foo:= a b cbar:= $(subst $(space),$(comma),$(foo))# bar is now `a,b,c&#39;.</code></pre></blockquote><p><strong>（4）patsubst函数</strong></p><p>patsubst 函数用于模式匹配的替换，格式如下。</p><blockquote><pre><code>$(patsubst pattern,replacement,text)</code></pre></blockquote><p>下面的例子将文件名”x.c.c bar.c”，替换成”x.c.o bar.o”。</p><blockquote><pre><code>$(patsubst %.c,%.o,x.c.c bar.c)</code></pre></blockquote><p><strong>（5）替换后缀名</strong></p><p>替换后缀名函数的写法是：变量名 + 冒号 + 后缀名替换规则。它实际上patsubst函数的一种简写形式。</p><blockquote><pre><code>min: $(OUTPUT:.js=.min.js)</code></pre></blockquote><p>上面代码的意思是，将变量OUTPUT中的后缀名 .js 全部替换成 .min.js 。</p><h2 id="四、Makefile-的实例"><a href="#四、Makefile-的实例" class="headerlink" title="四、Makefile 的实例"></a>四、Makefile 的实例</h2><p><strong>（1）执行多个目标</strong></p><blockquote><pre><code>.PHONY: cleanall cleanobj cleandiffcleanall : cleanobj cleandiff        rm programcleanobj :        rm *.ocleandiff :        rm *.diff</code></pre></blockquote><p>上面代码可以调用不同目标，删除不同后缀名的文件，也可以调用一个目标（cleanall），删除所有指定类型的文件。</p><p><strong>（2）编译C语言项目</strong></p><blockquote><pre><code>edit : main.o kbd.o command.o display.o    cc -o edit main.o kbd.o command.o display.omain.o : main.c defs.h    cc -c main.ckbd.o : kbd.c defs.h command.h    cc -c kbd.ccommand.o : command.c defs.h command.h    cc -c command.cdisplay.o : display.c defs.h    cc -c display.cclean :     rm edit main.o kbd.o command.o display.o.PHONY: edit clean</code></pre></blockquote><p>今天，Make命令的介绍就到这里。下一篇文章我会介绍，<a href="http://www.ruanyifeng.com/blog/2015/03/build-website-with-make.html">如何用 Make 来构建 Node.js 项目</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Makefile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rxjs 创建数据源</title>
    <link href="/51bd0b5659ab/"/>
    <url>/51bd0b5659ab/</url>
    
    <content type="html"><![CDATA[<h1 id="创建数据源的操作符"><a href="#创建数据源的操作符" class="headerlink" title="创建数据源的操作符"></a>创建数据源的操作符</h1><table><thead><tr><th>功能需求</th><th>适用的操作符</th></tr></thead><tbody><tr><td>直接操作观察者</td><td>create</td></tr><tr><td>根据有限的数据产生同步数据流</td><td>of</td></tr><tr><td>产生一个数值范围内的数据</td><td>range</td></tr><tr><td>以循环方式产生数据</td><td>generate</td></tr><tr><td>重复产生数据流中的数据</td><td>repeat(实例操作符 operator)和repeatWhen</td></tr><tr><td>产生空数据流</td><td>empty</td></tr><tr><td>产生直接出错的数据流</td><td>throw</td></tr><tr><td>产生永不完结的数据流</td><td>never</td></tr><tr><td>间隔给定时间持续产生数据</td><td>interval和timer</td></tr><tr><td>从数组等枚举类型数据产生数据流</td><td>from</td></tr><tr><td>从Promise对象产生数据流</td><td>fromPromise</td></tr><tr><td>从外部事件对象产生数据流</td><td>fromEvent(Hot Observable)和fromEventPattern</td></tr><tr><td>从AJAX请求结果产生数据流</td><td>ajax</td></tr><tr><td>延迟产生数据流</td><td>defer</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Rxjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rxjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
